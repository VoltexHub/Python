import tkinter as tk 
from tkinter import ttk
from playwright.sync_api import sync_playwright
import threading
import random
import string
from faker import Faker
import time
import re



fake = Faker()
browser_instance = None
stop_flag = False  

root = tk.Tk()
root.title("Roblox Account Creator")
root.geometry("400x400")

selected_app = tk.StringVar(value="Roblox")
neat_names_var = tk.BooleanVar(value=False)
auto_farm_var = tk.BooleanVar(value=False)
selected_game = tk.StringVar(value="Fisch")


def generate_username():
    raw_name = fake.last_name().lower()
    base_username = "crdb" + re.sub(r'[^a-z]', '', raw_name)  
    symbols = "xvecjn"
    end = "_i7"
    max_length = 20 - len(end)  

    if len(base_username) > max_length:
        base_username = base_username[:max_length]

    available_space = max_length - len(base_username)
    extra_symbols = ''.join(random.choices(symbols, k=min(available_space, 2)))

    return base_username + extra_symbols + end


def generate_password():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(8, 20)))

def get_random_dob():
    return random.randint(1, 12), random.randint(1, 28), 2005

def create_roblox_account(page):
    page.goto("https://www.roblox.com/")
    month, day, year = get_random_dob()

    page.click("//select[@id='MonthDropdown']")
    time.sleep(1)
    for _ in range(month):
        page.keyboard.press("ArrowDown")
    page.keyboard.press("Enter")

    page.click("//select[@id='DayDropdown']")
    time.sleep(1)
    for _ in range(day):
        page.keyboard.press("ArrowDown")
    page.keyboard.press("Enter")

    page.click("//select[@id='YearDropdown']")
    time.sleep(1)
    page.keyboard.type(str(year))
    page.keyboard.press("Enter")

    # username = generate_username()
    
     # Generate a valid username
    while True:  
        username = generate_username()
        page.fill("//input[@id='signup-username']", username)
        time.sleep(2)  

        # Check if error message appears
        error_message = page.query_selector("//p[@id='signup-usernameInputValidation']")
        
        if error_message:
            error_text = error_message.inner_text().strip().lower()
            if "not appropriate" in error_text or "already in use" in error_text:
                continue  # Generate new username if error exists
        
        # If no error, break the loop
        break      
        
    password = generate_password()

    page.fill("//input[@id='signup-username']", username)
    page.fill("//input[@id='signup-password']", password)

    gender = random.choice(["male", "female"])
    gender_xpath = "//button[@id='MaleButton']" if gender == "male" else "//button[@id='FemaleButton']"
    page.click(gender_xpath)

    page.click("//button[@id='signup-button']")
    time.sleep(5)

    print(f"New Account Created: Username: {username}, Password: {password}, Gender: {gender}, Date-Created: {month}/{day}/2025")
    
    time.sleep(5)
    logout_from_roblox(page)  # Logout after account creation

def logout_from_roblox(page):
    try:
        page.click("//li[@id='navbar-settings']")  # Open settings menu
        time.sleep(2)
        page.click("//a[contains(@class, 'logout-menu-item')]")  # Click logout
        time.sleep(2)
        
        # Handle logout modal if it appears
        if page.query_selector("//button[contains(@class, 'change-email-button')]"):
            page.click("//button[contains(@class, 'change-email-button')]")
            print("Logged out successfully!")
        else:
            print("No logout confirmation modal, logged out directly.")
        
        time.sleep(2)
    except Exception as e:
        print(f"Error during logout: {e}")


def start_creating_accounts():
    global browser_instance, stop_flag
    stop_flag = False  # Reset flag when start button is pressed

    def run_playwright():
        global browser_instance
        with sync_playwright() as p:
            browser_instance = p.chromium.launch(channel="msedge", headless=False)
            context = browser_instance.new_context()
            page = context.new_page()

            try:
                while not stop_flag:
                    create_roblox_account(page)
                    time.sleep(2)  # Small delay

            except Exception as e:
                print(f"Error during account creation: {e}")

            finally:
                if browser_instance:
                    try:
                        browser_instance.close()
                        print("Browser closed successfully!")
                    except Exception as e:
                        print(f"Error closing browser: {e}")
                    browser_instance = None
                print("Stopped account creation.")

    threading.Thread(target=run_playwright, daemon=True).start()
    on_button.config(bg="green")



def stop_creating_accounts():
    global stop_flag  
    stop_flag = True  # Set the flag to exit the loop safely
    print("Stopping process...")

    on_button.config(bg="lightgray")
    off_button.config(bg="red")

def open_settings():
    main_frame.pack_forget()
    settings_frame.pack()

def close_settings():
    settings_frame.pack_forget()
    main_frame.pack()

# Main Frame
# Main Frame
main_frame = tk.Frame(root)
main_frame.pack(pady=20)

# Button Frame (for horizontal alignment)
button_frame = tk.Frame(main_frame)
button_frame.pack()

on_button = tk.Button(button_frame, text="Start", width=10, bg="lightgray", command=start_creating_accounts)
on_button.grid(row=0, column=0, padx=10)  # Left button with some space

off_button = tk.Button(button_frame, text="Stop", width=10, bg="red", command=stop_creating_accounts)
off_button.grid(row=0, column=1, padx=10)  # Right button

settings_button = tk.Button(main_frame, text="Settings", width=10, command=open_settings)
settings_button.pack(pady=10)  # Settings button remains below

# Settings Frame
settings_frame = tk.Frame(root)

back_button = tk.Button(settings_frame, text="Back", command=close_settings)
back_button.pack(pady=5)

ttk.Label(settings_frame, text="Select App:").pack()
app_dropdown = ttk.Combobox(settings_frame, textvariable=selected_app, values=["Roblox", "Bullet Echo", "YouTube"], state="readonly")
app_dropdown.pack()

def update_roblox_settings(*args):
    if selected_app.get() == "Roblox":
        roblox_settings_frame.pack()
    else:
        roblox_settings_frame.pack_forget()

selected_app.trace_add("write", update_roblox_settings)

roblox_settings_frame = tk.Frame(settings_frame)
neat_names_check = tk.Checkbutton(roblox_settings_frame, text="Neat Names", variable=neat_names_var)
neat_names_check.pack()

auto_farm_check = tk.Checkbutton(roblox_settings_frame, text="Start Auto Farm", variable=auto_farm_var)
auto_farm_check.pack()

ttk.Label(roblox_settings_frame, text="Select Game:").pack()
game_dropdown = ttk.Combobox(roblox_settings_frame, textvariable=selected_game, values=["Fisch", "BloxFruit", "Bladeball"], state="readonly")
game_dropdown.pack()

root.mainloop()
